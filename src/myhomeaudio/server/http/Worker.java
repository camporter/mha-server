package myhomeaudio.server.http;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.Socket;
import java.util.Date;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;

import myhomeaudio.server.handler.ClientHandler;
import myhomeaudio.server.helper.Helper;
import myhomeaudio.server.helper.NodeHelper;
import myhomeaudio.server.helper.StreamHelper;
import myhomeaudio.server.helper.UserHelper;

/**
 * Worker is a thread that services a client's request.
 * 
 * @author cameron
 * 
 */
public class Worker extends Thread implements HTTPStatus, HTTPMimeType {
	final static int BUF_SIZE = 2048;

	// buffer to use for requests
	byte[] buf;
	private Socket clientSocket;
	private ClientHandler clientHandler;

	public Worker(ClientHandler clientHandler) {
		this.clientHandler = clientHandler;
		this.clientSocket = null;
	}

	// Set the client socket
	synchronized public void setClientSocket(Socket socket) {
		this.clientSocket = socket;
		notify();
	}

	synchronized public void run() {
		while (true) {
			if (clientSocket == null) {
				// Don't have a socket yet!
				try {
					// Wait for the thread to wake back up
					wait();
				} catch (InterruptedException e) {
					// ???
					continue;
				}
			}

			// The socket is ready, go ahead and start dealing with the client
			try {
				handleClient();
			} catch (Exception e) {
				e.printStackTrace();
				return;
			}

			clientSocket = null; // reset the socket for next use

			// Done using the Worker, put it back in the Worker pool
			synchronized (clientHandler) {
				if (!clientHandler.addWorker(this)) {
					// Worker no longer needed, so end it
					return;
				}
			}
		}
	}

	/**
	 * Handles all HTTP requests that come in, and responds accordingly.
	 * 
	 * @throws IOException
	 */
	private void handleClient() throws IOException {
		BufferedReader inputStream = new BufferedReader(new InputStreamReader(
				this.clientSocket.getInputStream()));
		DataOutputStream outputStream = new DataOutputStream(
				this.clientSocket.getOutputStream());
		
		System.out.println("Handling the client...");
		
		/*
		 * The final output we will send back to the client. We
		 * will slowly build it based off of what the client has
		 * requested.
		 */
		String output = ""; 
		
		String requestUri;
		
		// Get the HTTP header from the client
		String requestMessageLine = inputStream.readLine();

		StringTokenizer tokenizedRequestMessage = new StringTokenizer(
				requestMessageLine);

		String httpMethod = tokenizedRequestMessage.nextToken();
		
		String httpBody = "";
		if (httpMethod.equals("POST"))
		{
			// POST methods contain data, so we need to put it in httpBody
			String scan; // a string to read out individual lines
			
			// Keep reading lines until we find a blank line.
			// A blank line tells us when the HTTP header has ended and the HTTP body begins.
			do {
				scan = inputStream.readLine();
			}
			while (scan != null && scan.length() != 0);
			
			if (scan != null) {
				// Found the empty line, everything below is the body
				do {
					scan = inputStream.readLine();
					httpBody += (scan != null) ? (scan + "\r\n") : "";
				} while (scan != null && scan.length() != 0);
				
			}
		}
		System.out.println("BODY:\r\n"+httpBody+"\r\nEND BODY");
		
		requestUri = tokenizedRequestMessage.nextToken();
		requestUri = requestUri.startsWith("/") ? requestUri.substring(1)
				: requestUri; // Get rid of starting slash

		StringTokenizer tokenizedUri = new StringTokenizer(requestUri, "/");
		
		Helper currentHelper;
		
		try {
			String stringHelperName = tokenizedUri.nextToken();
			currentHelper = getCorrectHelper(stringHelperName);
			
		} catch (NoSuchElementException e) {
			// Client didn't specify a helper.
			// Do something else here
			currentHelper = new Helper();
			
		}
		
		// Give the helper the URI and body
		currentHelper.setData(requestUri, httpBody);
		// Get back the output it has generated
		output = currentHelper.getOutput();
		
		System.out.println(output);
		// Spit out the output generated by our selected Helper to the client
		//outputStream.writeBytes(output);
		
		// Clean up stuff
		clientSocket.close();
		requestUri = null;
		output = null;
		tokenizedRequestMessage = null;

	}

	private Helper getCorrectHelper(String helperName) {
		if (helperName == "node") {
			return new NodeHelper();
		}
		else {
			// default
			return new Helper();
		}

	}
}
